using Revise
using LaTeXStrings
using PyPlot
using Infiltrator
using Bem2d


"""
    plotfields_contours(els, xobs, yobs, idx, field, title)

Contouring of a single field for six-panel plotfields.
"""
function plotfields_contours(els, xobs, yobs, idx, field, titlestring)
    ncontours = 40
    xlim = [minimum(xobs) maximum(xobs)]
    ylim = [minimum(yobs) maximum(yobs)]
    subplot(2, 3, idx)
    scale = 1.0
    fieldmax = maximum(@.abs(field))
    contourf(xobs, yobs, reshape(field, size(xobs)), ncontours,
        vmin = -scale * fieldmax, vmax = scale * fieldmax, cmap = rycroftcmap())
    clim(-scale * fieldmax, scale * fieldmax)
    colorbar(fraction = 0.020, pad = 0.05, extend = "both")
    contour(xobs, yobs, reshape(field, size(xobs)), ncontours,
        vmin = -scale * fieldmax, vmax = scale * fieldmax, linewidths = 0.25, colors = "k")
    title(titlestring)
    stylesubplots(xlim, ylim)
    plotelements(els)
    return nothing
end


"""
    stylesubplots(xlim, ylim)

Common styling for subplots generated by plotfields.
"""
function stylesubplots(xlim, ylim)
    gca().set_aspect("equal")
    gca().set_xlim([xlim[1], xlim[2]])
    gca().set_ylim([ylim[1], ylim[2]])
    gca().set_xticks([xlim[1], 0, xlim[2]])
    gca().set_yticks([ylim[1], 0, ylim[2]])
    return nothing
end


"""
    plotfieldslocal(els, xobs, yobs, disp, stress, suptitlestring)

Set up six panel plots for displacement and stress fields.
"""
function plotfieldslocal(els, xobs, yobs, disp, stress, suptitlestring)
    figure(figsize = (15, 5))

    subplot(2, 3, 1)
    npts = 100
    uxreduced = reshape(disp[:, 1], npts, npts);
    uyreduced = reshape(disp[:, 2], npts, npts);
    uxreduced = uxreduced[1:10:end, 1:10:end];
    uyreduced = uyreduced[1:10:end, 1:10:end];
    xobsreduced = reshape(xobs, npts, npts);
    yobsreduced = reshape(yobs, npts, npts);
    xobsreduced = xobsreduced[1:10:end, 1:10:end];
    yobsreduced = yobsreduced[1:10:end, 1:10:end];
    quiver(xobsreduced[:], yobsreduced[:], uxreduced[:], uyreduced[:], units = "width", color = "b")
    stylesubplots([minimum(xobs) maximum(xobs)], [minimum(yobs) maximum(yobs)])
    plotelements(els)
    ylabel("y (m)")
    title(L"\mathbf{u}")
    
    plotfields_contours(els, xobs, yobs, 2, disp[:, 1], L"u_x")
    plotfields_contours(els, xobs, yobs, 3, disp[:, 2], L"u_y")
    plotfields_contours(els, xobs, yobs, 4, stress[:, 1], L"\sigma_{xx}")
    xlabel("x (m)")
    ylabel("y (m)")
    plotfields_contours(els, xobs, yobs, 5, stress[:, 2], L"\sigma_{yy}")
    xlabel("x (m)")
    plotfields_contours(els, xobs, yobs, 6, stress[:, 3], L"\sigma_{xy}")
    xlabel("x (m)")
    tight_layout(pad=0.4, w_pad=0.5, h_pad=1.0)
    return nothing
end


"""
    basicelements()

Compare farfield displacements and stresses from constant displacement
and quadratic displacement elements.  The point of this is to highlight 
the fact the quadratic elements can be used to create linear slip elements
that can accurately model a linear displacement gradient with no spurious
singularities.
"""
function basicelements()
    mu = 3e10
    nu = 0.25

    # Create a flat fault
    els = Elements(Int(1e5))
    nels = 1
    x1, y1, x2, y2 = discretizedline(-10e3, 0, 10e3, 0, nels)
    for i in 1:length(x1)
        els.x1[els.endidx + i] = x1[i]
        els.y1[els.endidx + i] = y1[i]
        els.x2[els.endidx + i] = x2[i]
        els.y2[els.endidx + i] = y2[i]
        els.name[els.endidx + i] = "fault"
    end
    standardize_elements!(els)

    # Convenience dictionary for element names
    idx = getidxdict(els)

    # Set fault slip
    xcenters = els.xcenter[1:els.endidx]
    ycenters = els.ycenter[1:els.endidx]
    xnodes = sort(els.xnodes[1:els.endidx, :][:])
    ynodes = sort(els.ynodes[1:els.endidx, :][:])

    # Constant x-slip only
    constxslip = ones(nels)
    constyslip = zeros(nels)
    quadxslip = [0.25 0.50 -0.15]
    quadyslip = [0.00 0.00 0.00]
    
    # Observation coordinates for far-field calculation
    npts = 100
    obswidth = 20e3
    xobs, yobs = obsgrid(-obswidth, -obswidth, obswidth, obswidth, npts)

    # Displacements and stresses
    dispconst, stressconst = constdispstress(slip2dispstress, xobs, yobs, els, idx["fault"], constxslip, constyslip, mu, nu)
    dispquad, stressquad = quaddispstress(slip2dispstress, xobs, yobs, els, idx["fault"], quadxslip, quadyslip, mu, nu)
    
    # Plot
    close("all")
    plotfieldslocal(els, reshape(xobs, npts, npts), reshape(yobs, npts, npts),
               dispconst, stressconst, "CS element")
    plotfieldslocal(els, reshape(xobs, npts, npts), reshape(yobs, npts, npts),
               dispquad, stressquad, "3QN quadratic slip element")
    return nothing
end
basicelements()
